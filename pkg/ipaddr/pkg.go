// Code generated by cuelang.org/go/pkg/gen. DO NOT EDIT.

package ipaddr

import (
	"cuelang.org/go/internal/core/adt"
	"cuelang.org/go/internal/pkg"
)

func init() {
	pkg.Register("ipaddr", p)
}

var _ = adt.TopKind // in case the adt package isn't used

var p = &pkg.Package{
	Native: []*pkg.Builtin{{
		Name: "GetSubnet",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
			{Kind: adt.TopKind},
			{Kind: adt.TopKind},
		},
		Result: adt.StringKind,
		Func: func(c *pkg.CallCtxt) {
			cidr, size, index := c.Value(0), c.Value(1), c.Value(2)
			if c.Do() {
				c.Ret, c.Err = GetSubnet(cidr, size, index)
			}
		},
	}, {
		Name: "GetIP",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
			{Kind: adt.TopKind},
		},
		Result: adt.StringKind,
		Func: func(c *pkg.CallCtxt) {
			cidr, index := c.Value(0), c.Value(1)
			if c.Do() {
				c.Ret, c.Err = GetIP(cidr, index)
			}
		},
	}, {
		Name: "GetInterface",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
			{Kind: adt.TopKind},
		},
		Result: adt.StringKind,
		Func: func(c *pkg.CallCtxt) {
			cidr, index := c.Value(0), c.Value(1)
			if c.Do() {
				c.Ret, c.Err = GetInterface(cidr, index)
			}
		},
	}, {
		Name: "Info",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
		},
		Result: adt.TopKind,
		Func: func(c *pkg.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = Info(ip)
			}
		},
	}, {
		Name: "IsV4IP",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
		},
		Result: adt.BoolKind,
		Func: func(c *pkg.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = IsV4IP(ip)
			}
		},
	}, {
		Name: "IsV6IP",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
		},
		Result: adt.BoolKind,
		Func: func(c *pkg.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = IsV6IP(ip)
			}
		},
	}, {
		Name: "IsV4CIDR",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
		},
		Result: adt.BoolKind,
		Func: func(c *pkg.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = IsV4CIDR(ip)
			}
		},
	}, {
		Name: "IsV6CIDR",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
		},
		Result: adt.BoolKind,
		Func: func(c *pkg.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = IsV6CIDR(ip)
			}
		},
	}, {
		Name: "IsV4Prefix",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
		},
		Result: adt.BoolKind,
		Func: func(c *pkg.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = IsV4Prefix(ip)
			}
		},
	}, {
		Name: "IsV6Prefix",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
		},
		Result: adt.BoolKind,
		Func: func(c *pkg.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = IsV6Prefix(ip)
			}
		},
	}, {
		Name: "IsV4Interface",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
		},
		Result: adt.BoolKind,
		Func: func(c *pkg.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = IsV4Interface(ip)
			}
		},
	}, {
		Name: "IsV6Interface",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
		},
		Result: adt.BoolKind,
		Func: func(c *pkg.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = IsV6Interface(ip)
			}
		},
	}, {
		Name: "IsV4",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
		},
		Result: adt.BoolKind,
		Func: func(c *pkg.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = IsV4(ip)
			}
		},
	}, {
		Name: "IsV6",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
		},
		Result: adt.BoolKind,
		Func: func(c *pkg.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = IsV6(ip)
			}
		},
	}, {
		Name: "IsIP",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
		},
		Result: adt.BoolKind,
		Func: func(c *pkg.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = IsIP(ip)
			}
		},
	}, {
		Name: "IsCIDR",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
		},
		Result: adt.BoolKind,
		Func: func(c *pkg.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = IsCIDR(ip)
			}
		},
	}, {
		Name: "IsPrefix",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
		},
		Result: adt.BoolKind,
		Func: func(c *pkg.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = IsPrefix(ip)
			}
		},
	}, {
		Name: "IsInterface",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
		},
		Result: adt.BoolKind,
		Func: func(c *pkg.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = IsInterface(ip)
			}
		},
	}, {
		Name: "Valid",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
		},
		Result: adt.BoolKind,
		Func: func(c *pkg.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = Valid(ip)
			}
		},
	}, {
		Name: "Single",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
		},
		Result: adt.BoolKind,
		Func: func(c *pkg.CallCtxt) {
			ip := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = Single(ip)
			}
		},
	}, {
		Name: "Range",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
		},
		Result: adt.ListKind,
		Func: func(c *pkg.CallCtxt) {
			cidr := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = Range(cidr)
			}
		},
	}, {
		Name: "Contains",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
			{Kind: adt.TopKind},
		},
		Result: adt.BoolKind,
		Func: func(c *pkg.CallCtxt) {
			a, b := c.Value(0), c.Value(1)
			if c.Do() {
				c.Ret, c.Err = Contains(a, b)
			}
		},
	}, {
		Name: "Compare",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
			{Kind: adt.TopKind},
		},
		Result: adt.IntKind,
		Func: func(c *pkg.CallCtxt) {
			a, b := c.Value(0), c.Value(1)
			if c.Do() {
				c.Ret, c.Err = Compare(a, b)
			}
		},
	}, {
		Name: "Overlaps",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
			{Kind: adt.TopKind},
		},
		Result: adt.BoolKind,
		Func: func(c *pkg.CallCtxt) {
			a, b := c.Value(0), c.Value(1)
			if c.Do() {
				c.Ret, c.Err = Overlaps(a, b)
			}
		},
	}, {
		Name: "ToPrefix",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
		},
		Result: adt.StringKind,
		Func: func(c *pkg.CallCtxt) {
			cidr := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = ToPrefix(cidr)
			}
		},
	}, {
		Name: "ToBytes",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
		},
		Result: adt.ListKind,
		Func: func(c *pkg.CallCtxt) {
			cidr := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = ToBytes(cidr)
			}
		},
	}, {
		Name: "PTR",
		Params: []pkg.Param{
			{Kind: adt.TopKind},
		},
		Result: adt.StringKind,
		Func: func(c *pkg.CallCtxt) {
			cidr := c.Value(0)
			if c.Do() {
				c.Ret, c.Err = PTR(cidr)
			}
		},
	}},
}
